import plotting_functions as pf
from matplotlib import rcParams
from matplotlib import pyplot as plt

# Figures are saved with automatically-generated filenames based on the mineral
# type and x/y data. They will automatically overwrite previous plots with the same
# name, so be careful and make sure you save data in different folders if you don't
# want this to be the case.

# Change parameters regarding the plots, e.g. default font size.
# A full list of these can be found at:
# https://matplotlib.org/stable/api/matplotlib_configuration_api.html#matplotlib.rcParams
# To change one, add another line to do e.g. rcParams['axes.linewidth'] = 2 to set the linewidth of the axes to 2
# This will affect all plots generated by this script.

rcParams['font.size'] = 14
rcParams['figure.figsize'] = [10, 8]
#Load in data
data = pf.load_excel_data_for_plots(path='output_data.xlsx')

# Example histogram plots - this covers all of the plots that you specified in your initial email I think. To add
# more, add the relevant sheet name and column name to hist_plots as another pair like ['sheetname', 'colname']
hist_plots = [['Olivine data', 'Fo'],
              ['Opx data', 'Mg#'],
              ['Opx data', 'Al2O3'],
              ['Opx data', 'Cr2O3'],
              ['Opx data', 'CaO'],
              ['Cpx data', 'Mg'],
              ['Cpx data', 'Al2O3'],
              ['Cpx data', 'Cr2O3'],
              ['Cpx data', 'CaO'],
              ['Spinel data', 'Cr'],
              ['Spinel data', 'Mg']]
for mintype, key in hist_plots:
    # generate them without the Gaussian fit
    pf.plot_hist(data, mintype=mintype, key=key, gaussian_fit=False)

# Example scatter plots.
olivine_plots = [['Fo', 'NiO'],
            ['Fo', 'MnO'],
            ['NiO', 'MnO']]
for x,y in olivine_plots:
    pf.scatter_plot(data, 'Olivine data', 'Olivine data', var1=x, var2=y)

opx_plots = [['Mg#', 'CaO'],
             ['Mg#', 'Al2O3'],
             ['Mg#', 'Cr2O3'],
             ['CaO', 'Al2O3'],
             ['CaO', 'Cr2O3']]

for x, y in opx_plots:
    pf.scatter_plot(data, 'Opx data', 'Opx data', var1=x, var2=y)

cpx_plots = [['Mg#', 'CaO'],
             ['Mg#', 'Al2O3'],
             ['Mg#', 'Cr2O3'],
             ['CaO', 'Al2O3'],
             ['CaO', 'Cr2O3']]
for x, y in cpx_plots:
    pf.scatter_plot(data, 'Cpx data', 'Cpx data', var1=x, var2=y)

spinel_plots = [['MgN', 'CrN'],
                ['TiO2', 'CrN']]
for x, y in spinel_plots:
    pf.scatter_plot(data, 'Spinel data', 'Spinel data', var1=x, var2=y)

# Plotting for the averages
average_combos = [['Olivine average', 'Fo', 'Opx average', 'Mg#'],
                  ['Olivine average', 'Fo', 'Cpx average', 'Mg#'],
                  ['Olivine average', 'Fo', 'Spinel average', 'CrN'],
                  ['Olivine average', 'Fo', 'Opx average', 'Al2O3'],
                  ['Olivine average', 'Fo', 'Opx average', 'Cr2O3'],
                  ['Olivine average', 'Fo', 'Cpx average', 'Al2O3'],
                  ['Olivine average', 'Fo', 'Cpx average', 'Cr2O3'],
                  ['Opx average', 'Mg#', 'Cpx average', 'Mg#'],
                  ['Opx average', 'Mg#', 'Spinel average', 'CrN'],
                  ['Opx average', 'Mg#', 'Cpx average', 'Cr2O3'],
                  ['Opx average', 'Mg#', 'Cpx average', 'Al2O3'],
                  ['Opx average', 'Al2O3', 'Cpx average', 'Al2O3'],
                  ['Opx average', 'Cr2O3', 'Cpx average', 'Cr2O3'],
                  ['Opx average', 'Cr2O3', 'Cpx average', 'Al2O3'],
                  ['Opx average', 'Al2O3', 'Cpx average', 'Cr2O3'],
                  ['Cpx average', 'Mg#', 'Spinel average', 'CrN'],
                  ['Olivine average', 'delta_Fo', 'Opx average', 'delta_Mg#'],
                  ['Olivine average', 'delta_Fo', 'Cpx average', 'delta_Mg#'],
                  ['Olivine average', 'delta_Fo', 'Spinel average', 'delta_CrN'],
                  ['Opx average', 'delta_Mg#', 'Cpx average', 'delta_Mg#']]

for minx, x, miny, y in average_combos:
    print(f'{minx} {x}, vs {miny} {y}')
    print('Shape x = ', data[minx].shape)
    print('Shape y = ', data[miny].shape)
    pf.scatter_plot(data, minx, miny, var1=x, var2=y)

# Example of a 3-variable scatterplot. You could do this in a loop like above if
# you wanted to generate many of these.
# z = the "colour" variable
minx = 'Opx average'
miny = 'Cpx average'
x = 'Mg#'
y = 'Mg#'
pf.scatter_plot(data, minx, miny, var1=x, var2=y, mintype_z='Olivine average',
                var3='Fo')


# plt.show()  # optionally display plots, will generate a lot if doing the automated plotting

